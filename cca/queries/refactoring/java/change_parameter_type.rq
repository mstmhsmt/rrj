
DEFINE input:inference "ont.cpi"

PREFIX fb:   <http://codinuum.com/fb/>
PREFIX ent:  <http://codinuum.com/fact/entity/>
PREFIX rel:  <http://codinuum.com/fact/version/release/>
PREFIX ext:  <http://codinuum.com/fact/external/>
PREFIX src:  <http://codinuum.com/ontologies/2012/10/source-code-entity#>
PREFIX ver:  <http://codinuum.com/ontologies/2012/10/versioning#>
PREFIX chg:  <http://codinuum.com/ontologies/2012/10/primitive-change#>
PREFIX java: <http://codinuum.com/ontologies/2012/10/java-entity#>
PREFIX c:    <http://codinuum.com/ontologies/2012/10/c-entity#>


SELECT DISTINCT ?param ?param_ ?v ?v_ ?ty ?ty_
(?ty AS ?originalType)
(?ty_ AS ?modifiedType)
(?tyname AS ?originalTypeName)
(?tyname_ AS ?modifiedTypeName)
(?dims AS ?originalTypeDims)
(?dims_ AS ?modifiedTypeDims)
(?v AS ?originalVariable)
(?v_ AS ?modifiedVariable)
(?pname AS ?originalParameterName)
(?pname_ AS ?modifiedParameterName)
(?param AS ?originalParameter)
(?param_ AS ?modifiedParameter)
(?cname AS ?className)
(?mname AS ?methodName)
(?meth AS ?originalMethod)
(?meth_ AS ?modifiedMethod)
(?class AS ?originalClass)
(?class_ AS ?modifiedClass)
(CONCAT(?className,".",?methodName) AS ?GROUP)
WHERE {

  {
    SELECT DISTINCT ?param ?param_ ?tyname ?tyname_ ?dims ?dims_ ?pname ?pname_
    ?meth ?meth_ ?ty ?ty_
    WHERE {
      {
        SELECT DISTINCT ?param ?param_ ?tyname ?tyname_ ?dims ?dims_ ?pname ?pname_
        ?meth ?meth_ ?ty ?ty_
        WHERE {
          ?param a java:Parameter ;
                 java:typeName ?tyname ;
                 java:name ?pname ;
                 java:inMethodOrConstructor ?meth ;
                 src:child1 ?ty ;
                 chg:mappedTo ?param_ .

          ?param_ a java:Parameter ;
                  java:typeName ?tyname_ ;
                  java:name ?pname_ ;
                  java:inMethodOrConstructor ?meth_ ;
                  src:child1 ?ty_ .

          OPTIONAL {
            ?param java:typeDims ?dims .
          }
          OPTIONAL {
            ?param_ java:typeDims ?dims_ .
          }

        } GROUP BY ?param ?param_ ?tyname ?tyname_ ?dims ?dims_ ?pname ?pname_
        ?meth ?meth_ ?ty ?ty_
      }
      ?ty a java:Type ;
          chg:mappedTo ?ty_ .

      ?ty_ a java:Type .

      FILTER (EXISTS {
        ?x src:parent+ ?ty ;
           chg:relabeled ?x_ .
        ?x_ src:parent+ ?ty_ .
      } || EXISTS {
        ?x src:parent+ ?ty ;
           chg:removal [] .
      } || EXISTS {
        ?x_ src:parent+ ?ty_ ;
            chg:addition [] .
      } || EXISTS {
        ?ty chg:changedTo ?ty_ .
      } || EXISTS {
        ?ty chg:relabeled ?ty_ .
      })

    } GROUP BY ?param ?param_ ?tyname ?tyname_ ?dims ?dims_ ?pname ?pname_
    ?meth ?meth_ ?ty ?ty_
  }

  OPTIONAL {
    ?v java:declaredBy ?param ;
       java:typeName ?tyname ;
       java:name ?pname ;
       chg:mappedTo ?v_ .
    ?v_ java:declaredBy ?param_ ;
        java:typeName ?tyname_ ;
        java:name ?pname_ .
  }

  # FILTER (EXISTS {
  #   ?v java:declaredBy ?param ;
  #      java:typeName ?tyname ;
  #      java:name ?pname ;
  #      chg:mappedTo ?v_ .
  #   ?v_ java:declaredBy ?param_ ;
  #       java:typeName ?tyname_ ;
  #       java:name ?pname_ .
  # } || EXISTS {
  #   ?class a java:InterfaceDeclaration .
  # } || NOT EXISTS {
  #   ?v java:declaredBy ?param .
  #   ?v_ java:declaredBy ?param_ .
  # })

  ?meth java:inTypeDeclaration ?class ;
        chg:mappedTo ?meth_ .

  OPTIONAL {
    ?meth java:name ?mname .
  }

  ?meth_ java:inTypeDeclaration ?class_ .

  ?class a java:TypeDeclaration ;
         java:name ?cname .

}
